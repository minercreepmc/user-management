/* tslint:disable */
/* eslint-disable */
/**
 * User Managemenet API
 * The User Management API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegisterAdminHttpRequest,
  RegisterMemberHttpRequest,
  SignInHttpRequest,
} from '../models';
import {
    RegisterAdminHttpRequestFromJSON,
    RegisterAdminHttpRequestToJSON,
    RegisterMemberHttpRequestFromJSON,
    RegisterMemberHttpRequestToJSON,
    SignInHttpRequestFromJSON,
    SignInHttpRequestToJSON,
} from '../models';

export interface RegisterAdminHttpControllerExecuteRequest {
    registerAdminHttpRequest: RegisterAdminHttpRequest;
}

export interface RegisterMemberHttpControllerExecuteRequest {
    registerMemberHttpRequest: RegisterMemberHttpRequest;
}

export interface SignInHttpControllerExecuteRequest {
    signInHttpRequest: SignInHttpRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getProfileHttpControllerExecuteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getProfileHttpControllerExecute(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getProfileHttpControllerExecuteRaw(initOverrides);
    }

    /**
     */
    async registerAdminHttpControllerExecuteRaw(requestParameters: RegisterAdminHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registerAdminHttpRequest === null || requestParameters.registerAdminHttpRequest === undefined) {
            throw new runtime.RequiredError('registerAdminHttpRequest','Required parameter requestParameters.registerAdminHttpRequest was null or undefined when calling registerAdminHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/register/admin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterAdminHttpRequestToJSON(requestParameters.registerAdminHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerAdminHttpControllerExecute(requestParameters: RegisterAdminHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerAdminHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registerGuestHttpControllerExecuteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/register/guest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerGuestHttpControllerExecute(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerGuestHttpControllerExecuteRaw(initOverrides);
    }

    /**
     */
    async registerMemberHttpControllerExecuteRaw(requestParameters: RegisterMemberHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.registerMemberHttpRequest === null || requestParameters.registerMemberHttpRequest === undefined) {
            throw new runtime.RequiredError('registerMemberHttpRequest','Required parameter requestParameters.registerMemberHttpRequest was null or undefined when calling registerMemberHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/register/member`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterMemberHttpRequestToJSON(requestParameters.registerMemberHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerMemberHttpControllerExecute(requestParameters: RegisterMemberHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerMemberHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signInHttpControllerExecuteRaw(requestParameters: SignInHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.signInHttpRequest === null || requestParameters.signInHttpRequest === undefined) {
            throw new runtime.RequiredError('signInHttpRequest','Required parameter requestParameters.signInHttpRequest was null or undefined when calling signInHttpControllerExecute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInHttpRequestToJSON(requestParameters.signInHttpRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signInHttpControllerExecute(requestParameters: SignInHttpControllerExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signInHttpControllerExecuteRaw(requestParameters, initOverrides);
    }

}
